# 확장하기 쉬운 코드가 아니라 삭제하기 쉬운 코드를 작성하자
-----

> “모든 코드는 이유 없이 작성되어, 나약함 때문에 유지보수 되다가, 우연히 삭제된다.”
> - 장폴 사르트르의 ANSI C 프로그래밍.

우리가 작성한 모든 코드에는 유지보수라는 형태의 대가가 따른다. 그래서 우리는 대가를 치뤄야 하는 코드가 너무 많아지는 것을 방지하기 위해서 재사용할 수 있는 소프트웨어를 만들려고 노력한다. 하지만 코드를 재사용하면 다른 문제가 발생한다. 나중에 코드를 바꾸려 할 때 재사용된 코드가 방해를 한다는 점이다.
어떤 API를 사용하는 코드가 더 많아질수록 그 API를 변경하는 과정에서 다시 작성해야만 하는 코드도 더 많아진다. 마찬가지로 어떤 서드 파티 API에 더 많이 의존할수록 그 API가 바뀌었을 때 고생도 더 많이 하게 된다. 대규모 시스템에서 코드가 어떻게 서로 맞물려 동작하는지, 그리고 어떤 부분이 다른 부분에 어떻게 의존하는지를 관리하는 것은 중요한 문제다. 게다가 프로젝트가 오래될수록 이 문제는 점점 더 어려워지기만 한다.

> 오늘 내가 하고자 하는 말은, 코드 줄 수를 셀 거라면 “작성된 코드 줄 수”가 아니라 “투입된 코드 줄 수”라고 봐야한다는 것이다.
> - 에츠허르 데이크스트라. 1988. EWD 1036

‘코드 줄 수’를 ‘투입된 코드 줄 수’라고 본다면, 코드를 삭제하는 것은 유지보수 비용을 줄이는 것이 된다. 우리는 재사용할 수 있는 소프트웨어가 아니라 쉽게 버릴 수 있는 소프트웨어를 만들려고 노력해야 한다.

게다가 코드를 작성하는 것보다는 삭제하는 것이 더 즐겁다는 것은 굳이 언급할 필요도 없을 것이다.

삭제하기 쉬운 코드를 작성하는 방법은 다음과 같다.

* 의존성이 만들어지는 것을 피하기 위해 중복되는 코드를 작성하되, 그렇다고 의존성을 관리하는 코드를 중복해서 작성하지는 말라.
* 코드를 여러 개의 레이어로 구성하라. 구현하기는 쉽지만 사용하기는 귀찮은 부분을 활용해서 사용하기 편한 API를 만들라.
* 코드를 분리하라. 작성하기 어려운 부분과 바뀔 가능성이 높은 부분은 나머지 코드로부터 분리하고, 서로로부터도 분리하라.
* 모든 의사결정을 하드 코딩하지 말고, 일부는 런타임 중에 바꿀 수 있도록 허용하는 것도 고려하라.
* 지금 말한 것들을 모두 한 번에 적용하려고 하지 말고, 무엇보다도 애초에 코드를 많이 작성하지 않는 것을 고려하라.

